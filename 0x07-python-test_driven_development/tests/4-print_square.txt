============================
How to Use 4-print_square.py
============================

Module using ``print_square(size)``.

Usage
=====

Squares are printed using the ``#`` character. The parameter ``size``
represents the height and width of the square.

Passing 1 as square size

    >>> print_square = __import__('4-print_square').print_square
    >>> print_square(1)
    #

Passing 4 as square size

    >>> print_square(4)
    ####
    ####
    ####
    ####

Passing 10 as square size

    >>> print_square(10)
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########

Passing 0 as square size

    >>> print_square(0)


Passing a string as square size


    >>> print_square("not an int")
    Traceback (most recent call last):
    TypeError: size must be an integer

Passing a float as square size

    >>> print_square(2.3)
    Traceback (most recent call last):
    TypeError: size must be an integer

Passing None as square size

    >>> print_square(None)
    Traceback (most recent call last):
    TypeError: size must be an integer

Passing negative number as square size

    >>> print_square(-7)
    Traceback (most recent call last):
    ValueError: size must be >= 0

We see that type-checking occurs before value-checking.

Passing negative number as square size

    >>> print_square(-7.5)
    Traceback (most recent call last):
    TypeError: size must be an integer

Passing no arguments as square size

    >>> print_square()
    Traceback (most recent call last):
    TypeError: print_square() missing 1 required positional argument: 'size'
